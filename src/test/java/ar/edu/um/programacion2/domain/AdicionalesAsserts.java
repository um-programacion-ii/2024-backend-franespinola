package ar.edu.um.programacion2.domain;

import static ar.edu.um.programacion2.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class AdicionalesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdicionalesAllPropertiesEquals(Adicionales expected, Adicionales actual) {
        assertAdicionalesAutoGeneratedPropertiesEquals(expected, actual);
        assertAdicionalesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdicionalesAllUpdatablePropertiesEquals(Adicionales expected, Adicionales actual) {
        assertAdicionalesUpdatableFieldsEquals(expected, actual);
        assertAdicionalesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdicionalesAutoGeneratedPropertiesEquals(Adicionales expected, Adicionales actual) {
        assertThat(expected)
            .as("Verify Adicionales auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdicionalesUpdatableFieldsEquals(Adicionales expected, Adicionales actual) {
        assertThat(expected)
            .as("Verify Adicionales relevant properties")
            .satisfies(e -> assertThat(e.getNombre()).as("check nombre").isEqualTo(actual.getNombre()))
            .satisfies(e -> assertThat(e.getDescripcion()).as("check descripcion").isEqualTo(actual.getDescripcion()))
            .satisfies(e -> assertThat(e.getPrecio()).as("check precio").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrecio()))
            .satisfies(e ->
                assertThat(e.getPrecioGratis())
                    .as("check precioGratis")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getPrecioGratis())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdicionalesUpdatableRelationshipsEquals(Adicionales expected, Adicionales actual) {
        assertThat(expected)
            .as("Verify Adicionales relationships")
            .satisfies(e -> assertThat(e.getVentaAdicionales()).as("check ventaAdicionales").isEqualTo(actual.getVentaAdicionales()));
    }
}
