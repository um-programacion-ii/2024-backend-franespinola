package ar.edu.um.programacion2.domain;

import static ar.edu.um.programacion2.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class OpcionesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpcionesAllPropertiesEquals(Opciones expected, Opciones actual) {
        assertOpcionesAutoGeneratedPropertiesEquals(expected, actual);
        assertOpcionesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpcionesAllUpdatablePropertiesEquals(Opciones expected, Opciones actual) {
        assertOpcionesUpdatableFieldsEquals(expected, actual);
        assertOpcionesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpcionesAutoGeneratedPropertiesEquals(Opciones expected, Opciones actual) {
        assertThat(expected)
            .as("Verify Opciones auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpcionesUpdatableFieldsEquals(Opciones expected, Opciones actual) {
        assertThat(expected)
            .as("Verify Opciones relevant properties")
            .satisfies(e -> assertThat(e.getCodigo()).as("check codigo").isEqualTo(actual.getCodigo()))
            .satisfies(e -> assertThat(e.getNombre()).as("check nombre").isEqualTo(actual.getNombre()))
            .satisfies(e -> assertThat(e.getDescripcion()).as("check descripcion").isEqualTo(actual.getDescripcion()))
            .satisfies(e ->
                assertThat(e.getPrecioAdicional())
                    .as("check precioAdicional")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getPrecioAdicional())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpcionesUpdatableRelationshipsEquals(Opciones expected, Opciones actual) {
        assertThat(expected)
            .as("Verify Opciones relationships")
            .satisfies(e -> assertThat(e.getPersonalizacion()).as("check personalizacion").isEqualTo(actual.getPersonalizacion()))
            .satisfies(e ->
                assertThat(e.getPersonalizacionOpciones())
                    .as("check personalizacionOpciones")
                    .isEqualTo(actual.getPersonalizacionOpciones())
            )
            .satisfies(e -> assertThat(e.getVentaOpciones()).as("check ventaOpciones").isEqualTo(actual.getVentaOpciones()));
    }
}
