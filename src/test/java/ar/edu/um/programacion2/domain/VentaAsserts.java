package ar.edu.um.programacion2.domain;

import static ar.edu.um.programacion2.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class VentaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVentaAllPropertiesEquals(Venta expected, Venta actual) {
        assertVentaAutoGeneratedPropertiesEquals(expected, actual);
        assertVentaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVentaAllUpdatablePropertiesEquals(Venta expected, Venta actual) {
        assertVentaUpdatableFieldsEquals(expected, actual);
        assertVentaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVentaAutoGeneratedPropertiesEquals(Venta expected, Venta actual) {
        assertThat(expected)
            .as("Verify Venta auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVentaUpdatableFieldsEquals(Venta expected, Venta actual) {
        assertThat(expected)
            .as("Verify Venta relevant properties")
            .satisfies(e ->
                assertThat(e.getPrecioFinal())
                    .as("check precioFinal")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getPrecioFinal())
            )
            .satisfies(e -> assertThat(e.getFechaVenta()).as("check fechaVenta").isEqualTo(actual.getFechaVenta()))
            .satisfies(e ->
                assertThat(e.getPrecioPersonalizaciones())
                    .as("check precioPersonalizaciones")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getPrecioPersonalizaciones())
            )
            .satisfies(e ->
                assertThat(e.getPrecioAdicionales())
                    .as("check precioAdicionales")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getPrecioAdicionales())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVentaUpdatableRelationshipsEquals(Venta expected, Venta actual) {
        assertThat(expected)
            .as("Verify Venta relationships")
            .satisfies(e -> assertThat(e.getDispositivoVenta()).as("check dispositivoVenta").isEqualTo(actual.getDispositivoVenta()))
            .satisfies(e ->
                assertThat(e.getPersonalizacionesVentas())
                    .as("check personalizacionesVentas")
                    .isEqualTo(actual.getPersonalizacionesVentas())
            )
            .satisfies(e -> assertThat(e.getAdicionalesVentas()).as("check adicionalesVentas").isEqualTo(actual.getAdicionalesVentas()));
    }
}
